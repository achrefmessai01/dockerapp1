pipeline {
    agent any

    environment {
        DOCKER_REPO = 'achrefmessai/dockerapp1'        // Ton repo Docker Hub
        IMAGE_TAG = "${env.BUILD_NUMBER}"              // Num√©ro du build
        FULL_IMAGE = "${DOCKER_REPO}:${IMAGE_TAG}"     // Image compl√®te
        HELM_CHART_PATH = './mon-app'                  // Chemin du chart Helm
    }

    stages {

        /*********************
         * 1Ô∏è‚É£ Installation de Helm
         *********************/
        stage('Installer Helm') {
            steps {
                sh '''
                    if ! command -v helm >/dev/null 2>&1; then
                        echo "üõ†Ô∏è Installation de Helm..."
                        apt-get update -qq && apt-get install -y curl >/dev/null
                        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
                    else
                        echo "‚úÖ Helm d√©j√† install√©."
                    fi
                    helm version
                '''
            }
        }

        /*********************
         * 2Ô∏è‚É£ Pr√©paration du code
         *********************/
        stage('Pr√©parer le code') {
            steps {
                checkout scm
                echo "‚úÖ D√©p√¥t clon√© avec succ√®s."
            }
        }

        /*********************
         * 3Ô∏è‚É£ Construction de l'image Docker
         *********************/
        stage('Construire l\'image Docker') {
            steps {
                script {
                    echo "üèóÔ∏è Construction de l'image Docker : ${FULL_IMAGE}"
                    sh "docker build -t ${FULL_IMAGE} ."
                }
            }
        }

        /*********************
         * 4Ô∏è‚É£ Push de l'image sur Docker Hub
         *********************/
        stage('Pousser l\'image Docker') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockercred', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    script {
                        echo "üöÄ Connexion √† Docker Hub..."
                        sh '''
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
                            docker push ${FULL_IMAGE}
                            docker logout
                        '''
                    }
                }
            }
        }

        /*********************
         * 5Ô∏è‚É£ D√©ploiement sur Kubernetes via Helm
         *********************/
        stage('D√©ployer avec Helm') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
                    withEnv(["KUBECONFIG=${KUBECONFIG_FILE}"]) {
                        script {
                            echo "üì¶ D√©ploiement de ${FULL_IMAGE} sur Kubernetes avec Helm..."

                            // Upgrade/Install Helm
                            sh """
                                helm upgrade --install mon-app ${HELM_CHART_PATH} \
                                    --set image.repository=${DOCKER_REPO} \
                                    --set image.tag=${IMAGE_TAG} \
                                    --set image.pullPolicy=IfNotPresent \
                                    --namespace default \
                                    --create-namespace

                                echo "üîç V√©rification du d√©ploiement..."
                                helm status mon-app --namespace default || true
                            """
                        }
                    }
                }
            }
        }
    }

    /*********************
     * 6Ô∏è‚É£ R√©sultats finaux
     *********************/
    post {
        success {
            echo "‚úÖ Pipeline termin√© avec succ√®s !"
            echo "Image d√©ploy√©e : ${FULL_IMAGE}"
        }
        failure {
            echo "‚ùå Pipeline √©chou√©. Consulte les logs Jenkins pour plus de d√©tails."
        }
    }
}
